initial
ABCDEFGH

rotated   letter  rotations  prev_index  new_index  index_difference  parity
HABCDEFG  A       1          0           1          1                 odd   
GHABCDEF  B       2          1           3          2                 odd   
FGHABCDE  C       3          2           5          3                 odd   
EFGHABCD  D       4          3           7          4                 odd   
CDEFGHAB  E       6          4           2          -2                even  
BCDEFGHA  F       7          5           4          -1                even  
ABCDEFGH  G       8          6           6          0                 even  
HABCDEFG  H       9          7           0 (8)      1                 even  
                                         ^^^^^^^^^ all unique :D

# maybe
if odd:
    prev_index = new_index >> 1
else:
    if new_index == 0:
        new_index = len(data)

    prev_index = (new_index + len(data)) // 2 - 1

# or
new_index = new_index or len(data)
if not new_index & 1:
    new_index += len(data)

rotation_count = new_index // 2 + 1
